!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddrSet	dns.cc	/^AddrSet::AddrSet():addrinfo_(NULL),current_pointer_to_addrinfo_(NULL)$/;"	f	class:AddrSet
AddrSet	dns.h	/^class AddrSet$/;"	c
Analysis	url.cc	/^void Url::Analysis()$/;"	f	class:Url
BASE_DIR	makefile	/^BASE_DIR=$(PROJECT_ROOT_DIR)\/base$/;"	m
BASE_DIR	tests/makefile	/^BASE_DIR=$(PROJECT_ROOT_DIR)\/base$/;"	m
COMPILE_OPTION	makefile	/^COMPILE_OPTION= -g -Wall -Werror -lpthread -lboost_regex $/;"	m
COMPLIE_OPTION	tests/makefile	/^COMPLIE_OPTION= -lpthread -Wall -Werror$/;"	m
CRAWL_DIR	tests/makefile	/^CRAWL_DIR=$(PROJECT_ROOT_DIR)\/crawl$/;"	m
DNS	dns.h	/^class DNS : public Singleton<DNS>$/;"	c
DNS_HEADER	dns.h	19;"	d
GetNode	url.h	/^        string GetNode() const { return node_;}$/;"	f	class:Url
GetPage	http.cc	/^bool GetPage(const Url &server_url, string &http_header, string &html_data)$/;"	f
GetSiteSeed	main.cc	/^void GetSiteSeed(UrlSet &sites_seeds, const string &file_name)$/;"	f
GetSockAddr	dns.cc	/^int AddrSet::GetSockAddr(SockAddr &temp)$/;"	f	class:AddrSet
GetSockAddr	url.h	/^        const SockAddr& GetSockAddr() const { return sockaddr_;}$/;"	f	class:Url
GetSourceDataUrl	url.h	/^        string GetSourceDataUrl() const { return source_url_;}$/;"	f	class:Url
GetUnvisitedUrl	page.cc	/^void Page::GetUnvisitedUrl(UrlSet &unvisited_sites)$/;"	f	class:Page
HTTP_HEADER	http.h	19;"	d
IfFilter	url.cc	/^bool Url::IfFilter(const string &url)$/;"	f	class:Url
IfValid	url.h	/^        bool IfValid() const { return (if_vaild_ and (url_scheme_ == SCHEME_HTTP));}$/;"	f	class:Url
IsHttpUrl	url.cc	/^bool Url::IsHttpUrl(const string &url)$/;"	f	class:Url
NET_DIR	makefile	/^NET_DIR=$(PROJECT_ROOT_DIR)\/net$/;"	m
NET_DIR	tests/makefile	/^NET_DIR=$(PROJECT_ROOT_DIR)\/net$/;"	m
OpenRawFile	page.cc	/^int Page::OpenRawFile()$/;"	f	class:Page
PAGE_HEADER	page.h	19;"	d
PROJECT_ROOT_DIR	makefile	/^PROJECT_ROOT_DIR=\/root\/lxf\/se$/;"	m
PROJECT_ROOT_DIR	tests/makefile	/^PROJECT_ROOT_DIR=\/root\/lxf\/se$/;"	m
Page	page.cc	/^Page::Page(const Url &url):url_(url)$/;"	f	class:Page
Page	page.h	/^class Page$/;"	c
PrintAddrInfo	tests/test_dns.cc	/^void PrintAddrInfo(SockAddr result)$/;"	f
PrintAddrInfo	tests/test_dns.cc	/^void PrintAddrInfo(struct addrinfo *result)$/;"	f
PrintAddrInfo	tests/test_dns.cc	/^void PrintAddrInfo(struct sockaddr_in addr_struct)$/;"	f
ResolutionHostName	dns.cc	/^void DNS::ResolutionHostName(struct addrinfo **dst_addrinfo, string node, string service)$/;"	f	class:DNS
ResolveNodeService	dns.cc	/^void DNS::ResolveNodeService(string node, string service, AddrSet &addrinfo)$/;"	f	class:DNS
Resolved	url.cc	/^void Url::Resolved()$/;"	f	class:Url
SCHEME_HTTP	url.h	/^    SCHEME_HTTP,$/;"	e	enum:UrlScheme
SCHEME_INVALID	url.h	/^    SCHEME_INVALID$/;"	e	enum:UrlScheme
SetAddrSetPointer	dns.cc	/^void AddrSet::SetAddrSetPointer(struct addrinfo *addrinfo_rt)$/;"	f	class:AddrSet
Str	url.h	/^        string Str() const { return str_url_;}$/;"	f	class:Url
TYPES_HEADER	types.h	19;"	d
URL_HEADER	url.h	19;"	d
Url	url.cc	/^Url::Url(string url):str_url_(url)$/;"	f	class:Url
Url	url.h	/^class Url$/;"	c
UrlRegexStr	url.cc	/^const string Url::UrlRegexStr = string("^http:\/\/([^\/]+)(\/.*$|$)");$/;"	m	class:Url	file:
UrlRegexStr	url.h	/^        static const string UrlRegexStr;$/;"	m	class:Url
UrlScheme	url.h	/^enum UrlScheme$/;"	g
UrlSet	types.h	/^typedef set<Url> UrlSet;$/;"	t
UrlSetIt	types.h	/^typedef UrlSet::iterator UrlSetIt;$/;"	t
VisitUrl	page.cc	/^void Page::VisitUrl()$/;"	f	class:Page
addrinfo_	dns.h	/^        struct addrinfo *addrinfo_;$/;"	m	class:AddrSet	typeref:struct:AddrSet::addrinfo
current_pointer_to_addrinfo_	dns.h	/^        struct addrinfo *current_pointer_to_addrinfo_;$/;"	m	class:AddrSet	typeref:struct:AddrSet::addrinfo
g_k_n_search_deepth	main.cc	/^const int g_k_n_search_deepth = 4;$/;"	v
html_data_	page.h	/^            string html_data_;$/;"	m	class:Page
http_header_	page.h	/^            string http_header_;$/;"	m	class:Page
if_vaild_	url.h	/^        bool if_vaild_;$/;"	m	class:Url
main	main.cc	/^int main(int argc, char *argv[])$/;"	f
main	tests/test_dns.cc	/^int main(int argc, char *argv[])$/;"	f
main	tests/test_getaddrinfo.cc	/^int main()$/;"	f
main	tests/test_page.cc	/^int main(int argc, char *argv[])$/;"	f
main	tests/test_url.cc	/^int main()$/;"	f
node_	url.h	/^        string node_;$/;"	m	class:Url
operator <	url.h	/^inline bool operator < (const Url &left, const Url &right)$/;"	f
operator <<	url.h	/^inline ostream& operator << (ostream &out, const Url &url)$/;"	f
operator ==	url.h	/^inline bool operator == (const Url &left, const Url &right)$/;"	f
raw_file_fd_	page.cc	/^int Page::raw_file_fd_ = OpenRawFile();$/;"	m	class:Page	file:
raw_file_fd_	page.h	/^            static int raw_file_fd_;$/;"	m	class:Page
services_	url.h	/^        string services_;$/;"	m	class:Url
sockaddr_	url.h	/^        SockAddr sockaddr_;$/;"	m	class:Url
source_url_	url.h	/^        string source_url_;$/;"	m	class:Url
str_url_	url.h	/^        string str_url_;$/;"	m	class:Url
url_	page.h	/^            Url url_;$/;"	m	class:Page
url_scheme_	url.h	/^        UrlScheme url_scheme_;$/;"	m	class:Url
visit_url	main.cc	/^int visit_url(const Url &url, const UrlSet &visited_sites, UrlSet &unvisited_sites)$/;"	f
~AddrSet	dns.cc	/^AddrSet::~AddrSet()$/;"	f	class:AddrSet
